{"version":3,"file":"patternlock.umd.min.js","sources":["../src/vector.ts","../src/dot.ts","../src/utils/svg.ts","../src/patternlock.ts","../src/utils/css.ts","../src/utils/util.ts"],"sourcesContent":["export class Vector {\r\n    /** X坐标 */\r\n    x: number;\r\n    /** Y坐标 */\r\n    y: number;\r\n\r\n    constructor(x: number, y: number) {\r\n        this.x = x;\r\n        this.y = y;\r\n    }\r\n\r\n    /**\r\n     * 获取该点距离xy坐标的距离\r\n     * @param x\r\n     * @param y\r\n     */\r\n    getDistance(x: number, y: number) {\r\n        const _x = x - this.x, _y = y - this.y;\r\n        return Math.sqrt((_x * _x) + (_y * _y));\r\n    };\r\n\r\n    /**\r\n     * 判断该点是否在x1 y1 x2 y2线段上\r\n     * @param x1\r\n     * @param y1\r\n     * @param x2\r\n     * @param y2\r\n     */\r\n    isOnLine(x1: number, y1: number, x2: number, y2: number) {\r\n        if (this.y >= Math.min(y1, y2) && this.y <= Math.max(y1, y2) && this.x >= Math.min(x1, x2) && this.x <= Math.max(x1, x2)) {\r\n            const precision = (this.x - x1) * (y1 - y2) - (x1 - x2) * (this.y - y1);\r\n            if (precision < 2e-10 && precision > -2e-10) { // 实质判断是否接近0\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n}","import { Vector } from \"./vector\";\r\n\r\nexport class Dot extends Vector {\r\n    /** 圆点的值 */\r\n    value: string;\r\n    /** 是否被选中 */\r\n    isActive: boolean;\r\n    /** 圆点元素 */\r\n    element: SVGCircleElement;\r\n\r\n    constructor(x: number, y: number, value: string, isActive: boolean = false) {\r\n        super(x, y);\r\n        this.value = value;\r\n        this.isActive = isActive;\r\n    }\r\n}","export class Svg {\r\n    static namespace: string = 'http://www.w3.org/2000/svg';\r\n    static version: string = '1.1';\r\n\r\n    /**\r\n     * 创建SVG系列元素\r\n     * @param name 元素名称\r\n     * @param attrObj 属性对象\r\n     */\r\n    static createElement(name: string, attrObj: { [key: string]: string | number }): Element {\r\n        const element = document.createElementNS(Svg.namespace, name);\r\n        for (const key in attrObj) {\r\n            element.setAttribute(key, attrObj[key] + '');\r\n        }\r\n        return element;\r\n    }\r\n\r\n    /**\r\n     * 创建SVG元素\r\n     */\r\n    static createSvgElement(): SVGElement {\r\n        return Svg.createElement('svg', {\r\n            xmlns: Svg.namespace,\r\n            version: Svg.version\r\n        }) as SVGElement;\r\n    }\r\n}","import { Dot } from './dot';\r\nimport { Css } from './utils/css';\r\nimport { Svg } from './utils/svg';\r\nimport { debounce } from './utils/util';\r\nimport { Vector } from './vector';\r\n\r\ntype PatternLockCallback = {\r\n    verify: (value: string) => boolean,\r\n    complete: (value: string) => void,\r\n    reset?: () => void\r\n};\r\n\r\nexport class PatternLock {\r\n    /** 图形锁父容器元素 */\r\n    container: HTMLElement;\r\n    /** 回调函数对象 */\r\n    callback: PatternLockCallback;\r\n    /** 图形锁的值 */\r\n    value: string;\r\n    /** 图形锁的宽度（宽度将等于高度）*/\r\n    width: number;\r\n    /** 圆点的半径 */\r\n    radius: number;\r\n    /** 圆点的外边距 */\r\n    margin: number;\r\n    /** 图形锁SVG 元素 */\r\n    svg: SVGElement;\r\n    /** 储存九个圆点实例的数组 */\r\n    dotsPos: Array<Dot> = [];\r\n    /** 折线元素 */\r\n    polyline: SVGPolylineElement;\r\n    /** 折线的上一个坐标 */\r\n    lastPos: Vector;\r\n    /** 折线的当前坐标 */\r\n    currentPos: Vector;\r\n    /** 折线的points属性值 */\r\n    points: string;\r\n    /** 图形锁是否被操作过 */\r\n    isDirty: boolean;\r\n    /** 图形锁的动画样式 */\r\n    style: HTMLStyleElement;\r\n\r\n    /**\r\n     * 构造函数\r\n     * @param selectors 选择器\r\n     * @param callback\r\n     */\r\n    constructor(selectors: string, callback: PatternLockCallback) {\r\n        this.container = document.querySelector(selectors);\r\n        this.callback = callback;\r\n\r\n        this.svg = Svg.createSvgElement();\r\n        this.svg.style.width = this.svg.style.height = '100%';\r\n        this.container.appendChild(this.svg);\r\n\r\n        this.init();\r\n\r\n        for (const dot of this.dotsPos) { // 绘制大圆点\r\n            dot.element = this.drawDot(dot.x, dot.y, this.radius, '#eee', 'dot');\r\n            this.addClickEventListener(dot);\r\n        }\r\n\r\n        this.addTouchMoveEventListener();\r\n        this.addTouchCompleteEventListener();\r\n    }\r\n\r\n    /**\r\n     * 初始化图形锁\r\n     */\r\n    init() {\r\n        // 根据父元素的尺寸计算图形锁的一些尺寸\r\n        this.width = this.container.clientWidth;\r\n        this.radius = this.width / 6 * .7;\r\n        this.margin = (this.width - this.radius * 6) / 4;\r\n\r\n        this.style && document.head.removeChild(this.style);\r\n        this.style = Css.addStyle(`\r\n            .inner-dot {\r\n                animation: gl-inner-dot-scale .25s ease-in;\r\n            }\r\n            @keyframes gl-inner-dot-scale {\r\n                0% {\r\n                    r: ${this.radius / 2.5};\r\n                } 50% {\r\n                    r: ${this.radius / 2};\r\n                } 100% {\r\n                    r: ${this.radius / 2.5};\r\n                }\r\n            }\r\n        `);\r\n\r\n        const pos = [\r\n            this.radius + this.margin,\r\n            this.radius * 3 + this.margin * 2,\r\n            this.radius * 5 + this.margin * 3\r\n        ];\r\n\r\n        this.dotsPos = [\r\n            new Dot(pos[0], pos[0], '1'),\r\n            new Dot(pos[1], pos[0], '2'),\r\n            new Dot(pos[2], pos[0], '3'),\r\n            new Dot(pos[0], pos[1], '4'),\r\n            new Dot(pos[1], pos[1], '5'),\r\n            new Dot(pos[2], pos[1], '6'),\r\n            new Dot(pos[0], pos[2], '7'),\r\n            new Dot(pos[1], pos[2], '8'),\r\n            new Dot(pos[2], pos[2], '9')\r\n        ];\r\n    }\r\n\r\n    /**\r\n     * 为圆点元素添加ontouchstart或mousemove事件\r\n     * @param dot\r\n     */\r\n    addClickEventListener(dot: Dot) {\r\n        const listener = () => {\r\n            // 如果图形锁已经被操作过 如果该点没有被选中\r\n            if (this.isDirty || dot.isActive) { return; }\r\n\r\n            this.isDirty = true;\r\n            dot.isActive = true;\r\n            dot.element.setAttribute('fill', '#a7ffeb');\r\n            this.drawDot(dot.x, dot.y, this.radius / 2.5, '#1de9b6', 'inner-dot'); // 添加小圆点\r\n\r\n            this.lastPos = new Vector(dot.x, dot.y);    // 上一个坐标点\r\n            this.currentPos = new Vector(dot.x, dot.y); // 当前坐标点\r\n            this.points = `${dot.x} ${dot.y} `;         // 当前折线的points属性值\r\n            this.polyline = Svg.createElement('polyline', {\r\n                points: this.points,\r\n                'stroke-linejoin': 'round',\r\n                'stroke-linecap': 'round',\r\n                stroke: '#1de9b6',\r\n                style: `fill:none;stroke-width:${this.radius / 4}`\r\n            }) as SVGPolylineElement;\r\n            this.svg.appendChild(this.polyline);\r\n\r\n            this.value = `${dot.value}`;\r\n        }\r\n\r\n        if ('ontouchstart' in document.documentElement) {\r\n            dot.element.addEventListener('touchstart', (e: TouchEvent) => {\r\n                e.stopPropagation(); // 阻止冒泡\r\n                // 如果触摸点等于一\r\n                e.touches.length === 1 && listener();\r\n            });\r\n        } else {\r\n            dot.element.addEventListener('mousemove', (e: MouseEvent) => {\r\n                // 如果鼠标移动时按下左键\r\n                e.buttons === 1 && listener();\r\n            });\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     * 为图形锁SVG元素添加ontouchmove事件\r\n     */\r\n    addTouchMoveEventListener() {\r\n        const listener = (x: number, y: number, e: TouchEvent | MouseEvent) => {\r\n            e.preventDefault(); // 防止浏览器下拉\r\n            if (!this.polyline) { return; } // 如果折线不存在\r\n\r\n            x = x - this.container.offsetLeft;\r\n            y = y - this.container.offsetTop;\r\n\r\n            for (const dot of this.dotsPos) {\r\n                // 如果这个点没有被选中而且当前坐标在圆内\r\n                if (!dot.isActive && dot.getDistance(x, y) <= this.radius * .85) {\r\n                    // 让上一个坐标点等于上一次的当前坐标点\r\n                    this.lastPos.x = this.currentPos.x;\r\n                    this.lastPos.y = this.currentPos.y;\r\n\r\n                    this.currentPos = new Vector(dot.x, dot.y); //让上一次的当前坐标点等于选择的坐标点\r\n\r\n                    this.points = this.points + `${dot.x} ${dot.y} `;\r\n                    dot.element.setAttribute('fill', '#a7ffeb');\r\n                    dot.isActive = true;\r\n                    this.drawDot(dot.x, dot.y, this.radius / 2.5, '#1de9b6', 'inner-dot'); //添加小圆点\r\n\r\n                    for (const d of this.dotsPos) {\r\n                        if (!d.isActive && d.isOnLine(this.lastPos.x, this.lastPos.y, this.currentPos.x, this.currentPos.y)) {\r\n                            d.element.setAttribute('fill', '#a7ffeb');\r\n                            d.isActive = true;\r\n                            this.drawDot(d.x, d.y, this.radius / 2.5, '#1de9b6', 'inner-dot'); //添加小圆点\r\n\r\n                            this.value += d.value;\r\n                        }\r\n                    }\r\n\r\n                    this.value += dot.value;\r\n                }\r\n                this.polyline.setAttribute('points', this.points + `${x} ${y} `);\r\n            }\r\n        }\r\n\r\n        if ('ontouchmove' in document.documentElement) {\r\n            this.svg.addEventListener('touchmove', (e: TouchEvent) => {\r\n                listener(e.changedTouches[0].clientX, e.changedTouches[0].clientY, e);\r\n            })\r\n        } else {\r\n            document.addEventListener('mousemove', (e: MouseEvent) => {\r\n                // 如果鼠标移动时按下左键\r\n                (e.buttons === 1 && this.container.style.pointerEvents !== 'none') && listener(e.clientX, e.clientY, e);\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 为图形锁SVG元素添加ontouchend和ontouchcancel事件\r\n     */\r\n    addTouchCompleteEventListener() {\r\n        const complete = () => {\r\n            if (!this.isDirty) { return; }\r\n            this.container.style.pointerEvents = 'none'; // 禁止触摸\r\n            this.polyline && this.polyline.setAttribute('points', this.points); // 截断被手指拉长的那段线\r\n            this.verify();\r\n            this.callback.complete && this.callback.complete(this.value);\r\n            setTimeout(() => {\r\n                this.reset();\r\n                this.container.style.pointerEvents = 'auto';\r\n            }, 1000);\r\n        }\r\n\r\n        if ('ontouchend' in document.documentElement) {\r\n            this.svg.addEventListener('touchend', () => complete());\r\n\r\n            this.svg.addEventListener('touchcancel', () => complete()); // 当触摸事件被意外中断时\r\n        } else {\r\n            document.addEventListener('mouseup', () => complete()); // 当鼠标松开时\r\n        }\r\n    }\r\n\r\n    resize() {\r\n        window.addEventListener('resize', debounce(() => this.init(), 250));\r\n    }\r\n\r\n    /**\r\n     * 验证图形密码\r\n     */\r\n    verify() {\r\n        if (!this.callback.verify(this.value)) {\r\n            this.polyline && this.polyline.setAttribute('stroke', '#ff5252');\r\n            for (const dot of this.dotsPos) {\r\n                dot.isActive && dot.element.setAttribute('fill', '#ffcdd2');\r\n            }\r\n            const innerDots: NodeListOf<Element> = document.querySelectorAll('.inner-dot');\r\n            for (let i = 0; i < innerDots.length; i++) {\r\n                innerDots[i].setAttribute('fill', '#ff5252');\r\n            }\r\n            // 震动150毫秒\r\n            'vibrate' in window.navigator && window.navigator.vibrate(150);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 重置图形锁\r\n     */\r\n    reset() {\r\n        this.points = '';\r\n        this.value = '';\r\n        this.isDirty = false;\r\n\r\n        if (this.polyline) {\r\n            this.svg.removeChild(this.polyline);\r\n            this.polyline = null;\r\n        }\r\n\r\n        const innderDots = this.svg.querySelectorAll('.inner-dot');\r\n\r\n        for (const innerDot of innderDots) { // 清除所有小圆点\r\n            this.svg.removeChild(innerDot);\r\n        }\r\n\r\n        for (const dot of this.dotsPos) { // 绘制大圆点\r\n            if (dot.isActive) { dot.isActive = false; } // 取消选中\r\n            dot.element.getAttribute('fill') !== '#eee' && dot.element.setAttribute('fill', '#eee'); // 恢复默认颜色\r\n        }\r\n\r\n        this.callback.reset && this.callback.reset();\r\n    }\r\n\r\n    /**\r\n     * 绘制图形锁的圆点\r\n     * @param cx 圆点X坐标\r\n     * @param cy 圆点Y坐标\r\n     * @param r 圆点半径\r\n     * @param fill 填充颜色\r\n     * @param className 类名\r\n     */\r\n    drawDot(cx: number, cy: number, r: number, fill: string, className: string) {\r\n        const dotElement = Svg.createElement('circle', {\r\n            cx: cx,\r\n            cy: cy,\r\n            r: r,\r\n            fill: fill,\r\n            class: className\r\n        }) as SVGCircleElement;\r\n\r\n        this.svg.appendChild(dotElement);\r\n\r\n        return dotElement;\r\n    }\r\n}","export class Css {\r\n    /**\r\n     * 添加CSS样式\r\n     * @param style 样式\r\n     */\r\n    static addStyle(style: string): HTMLStyleElement {\r\n        const element = document.createElement('style');\r\n        element.innerHTML = style;\r\n        document.head.appendChild(element);\r\n        return element;\r\n    }\r\n}","/**\r\n * 防抖函数\r\n * @param fn 需要进行防抖的函数\r\n * @param delay 防抖时间\r\n */\r\nexport function debounce(fn: Function, delay: number) {\r\n    let timer: number = null;\r\n    return function () {\r\n        timer && clearTimeout(timer);\r\n        timer = window.setTimeout(fn, delay);\r\n    }\r\n}"],"names":["Vector","[object Object]","x","y","this","_x","_y","Math","sqrt","x1","y1","x2","y2","min","max","precision","Dot","value","isActive","super","Svg","name","attrObj","element","document","createElementNS","namespace","key","setAttribute","createElement","xmlns","version","selectors","callback","container","querySelector","svg","createSvgElement","style","width","height","appendChild","init","dot","dotsPos","drawDot","radius","addClickEventListener","addTouchMoveEventListener","addTouchCompleteEventListener","clientWidth","margin","head","removeChild","innerHTML","addStyle","pos","listener","isDirty","lastPos","currentPos","points","polyline","stroke-linejoin","stroke-linecap","stroke","documentElement","addEventListener","e","stopPropagation","touches","length","buttons","preventDefault","offsetLeft","offsetTop","getDistance","d","isOnLine","changedTouches","clientX","clientY","pointerEvents","complete","verify","setTimeout","reset","window","fn","delay","timer","clearTimeout","debounce","innerDots","querySelectorAll","i","navigator","vibrate","innderDots","innerDot","getAttribute","cx","cy","r","fill","className","dotElement","class"],"mappings":"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"}